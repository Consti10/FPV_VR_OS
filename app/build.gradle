apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.crashlytics'

android {
    compileSdkVersion rootProject.compileSdkVersion
    //ndkVersion rootProject.ndkVersion
    useLibrary 'org.apache.http.legacy' //DJI

    defaultConfig {
        applicationId "constantin.fpv_vr.wifibroadcast"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 47
        versionName "4.7"
        multiDexEnabled true //DJI
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++17"  //,"-frtti","-fexceptions"
                arguments "-DANDROID_STL=c++_static",   //, "-DCMAKE_VERBOSE_MAKEFILE=ON"
                        //Pass trough the location for cmake to find native (cpp) code of the TelemetryCore module
                        "-DT_CORE_DIR=${project(':TelemetryCore').getProjectDir().getAbsolutePath().replace("\\", "/")}",
                        //Pass trough the location for cmake to find native (cpp) code of the RenderingXCore module
                        "-DRX_CORE_DIR=${project(':RenderingXCore').getProjectDir().getAbsolutePath().replace("\\", "/")}",
                        //Pass trough the location for cmake to find native (cpp) code of the VideoCore module
                        "-DV_CORE_DIR=${project(':VideoCore').getProjectDir().getAbsolutePath().replace("\\", "/")}"//,
                //"-DANDROID_PLATFORM=28"
            }
        }
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a'//, 'x86','x86_64'
        }
        testInstrumentationRunner = 'androidx.test.runner.AndroidJUnitRunner'
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //https://developer.android.com/studio/build/shrink-code#native-crash-support
            //ndk{
            //    debugSymbolLevel = full
            //}
        }
        debug {
            debuggable true
            minifyEnabled false // without this set to false jni calls might not work
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }
    buildFeatures{
        viewBinding=true
        //prefab = true
    }
    // dji sdk begin
    //packagingOptions {
    //    doNotStrip "*/*/libdjivideo.so"
    //    doNotStrip "*/*/libSDKRelativeJNI.so"
    //    doNotStrip "*/*/libFlyForbid.so"
    //    doNotStrip "*/*/libduml_vision_bokeh.so"
    //    doNotStrip "*/*/libyuv2.so"
    //    doNotStrip "*/*/libGroudStation.so"
    //    doNotStrip "*/*/libFRCorkscrew.so"
    //    doNotStrip "*/*/libUpgradeVerify.so"
    //    doNotStrip "*/*/libFR.so"
    //    doNotStrip "*/*/libDJIFlySafeCore.so"
    //    doNotStrip "*/*/libdjifs_jni.so"
    //    doNotStrip "*/*/libsfjni.so"
    //    doNotStrip "*/*/libDJICommonJNI.so"
    //    doNotStrip "*/*/libDJICSDKCommon.so"
    //    doNotStrip "*/*/libDJIUpgradeCore.so"
    //    doNotStrip "*/*/libDJIUpgradeJNI.so"
    //    doNotStrip "*/*/libDJIWaypointV2Core.so"
    //    doNotStrip "*/*/libAMapSDK_MAP_v6_9_2.so"
    //    doNotStrip "*/*/libDJIMOP.so"
    //    exclude 'META-INF/rxjava.properties'
    //    exclude 'assets/location_map_gps_locked.png'
    //    exclude 'assets/location_map_gps_3d.png'
    //}
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    // dji sdk end
}

dependencies {
    //implementation fileTree(dir: 'libs', include: ['*.jar'])
    // ******************************************* DJI SDK begin *******************************************
    //implementation 'androidx.multidex:multidex:2.0.0'
    /*implementation 'com.squareup:otto:1.3.8'
    implementation('com.dji:dji-sdk:4.16', {
        // Uncomment the "library-anti-distortion" if your app does not need Anti Distortion for Mavic 2 Pro and Mavic 2 Zoom.
        // Uncomment the "fly-safe-database" if you need database for release, or we will download it when DJISDKManager.getInstance().registerApp
        // is called.
        // Both will greatly reducing the size of the APK.
        exclude module: 'library-anti-distortion'
        exclude module: 'fly-safe-database'
    })
    compileOnly 'com.dji:dji-sdk-provided:4.16'
    //implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.core:core:1.7.0'
    //implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    //implementation 'androidx.recyclerview:recyclerview:1.1.0'
    //This one is especially needed, else
    //java.lang.NoClassDefFoundError: Failed resolution of: Landroidx/lifecycle/ProcessLifecycleOwner;
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    //implementation 'androidx.annotation:annotation:1.1.0'
    //implementation 'com.jakewharton:butterknife:10.0.0'
    //annotationProcessor 'com.jakewharton:butterknife-compiler:10.0.0'
    //implementation "androidx.core:core-ktx:1.3.1"
    //implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.0-alpha07"
    //implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.4.10"*/
    // ******************************************* DJI SDK end *******************************************

    implementation "androidx.appcompat:appcompat:$rootProject.appcompatVersion"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.constraintlayoutVersion"
    implementation "com.google.android.material:material:$rootProject.materialVersion"
    implementation('com.google.android.gms:play-services-location:19.0.1')

    implementation "androidx.preference:preference:$rootProject.androidxpreferenceVersion"
    implementation "com.github.Consti10:prefs-plus:$rootProject.myPrefsPlusVersion"

    implementation project(':RenderingXCore')
    //
    implementation project(':VideoCore')
    implementation project(':TelemetryCore')
    implementation project(':uvcintegration')

    //implementation project(':uvcintegration')
    // TelemetryCore and VideoCore comes from djiintegration (aka api instead of implementation)
    //implementation project(':TelemetryCore')
    //implementation project(':VideoCore')
    //implementation "com.github.Consti10.LiveVideo10ms:uvcintegration:25f87dc9"
    //implementation "com.github.Consti10.LiveVideo10ms:VideoCore:25f87dc9"
    //implementation "com.github.Consti10.LiveVideo10ms:TelemetryCore:25f87dc9"

    //THIS IS IT ! implementation "androidx.activity:activity:1.2.0-alpha08"

    //firebase stuff
    implementation 'com.google.firebase:firebase-core:20.1.0'
    implementation 'com.google.firebase:firebase-crashlytics:18.2.8'

    //Screen recording and more
    implementation 'com.github.HBiSoft:HBRecorder:0.1.12'
    implementation 'com.github.santaevpavel:OutlineSpan:0.1.0'
    implementation("com.google.guava:guava:29.0-android")
    
    // Testing
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.4.0')
    androidTestImplementation('androidx.test:rules:1.4.0')
}

apply plugin: 'com.google.gms.google-services'
